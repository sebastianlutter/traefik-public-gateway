version: '3'

services:
  traefik:
    image: traefik:v3.1
    command:
      - "--api.insecure=false"
      - --log.level=WARN
      - "--providers.swarm=true"
      - --api.dashboard=true
      - "--providers.swarm.exposedbydefault=false"
      - "--providers.docker.network=public-gateway"
      - --providers.docker.constraints=Label("traefik.constraint-label", "public-gateway")
      - "--entrypoints.http.address=:80"
      - "--entrypoints.https.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=${EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--providers.file.directory=/configs/"
      - "--experimental.plugins.htransformation.moduleName=github.com/tomMoulard/htransformation"
      - "--experimental.plugins.htransformation.version=v0.3.1"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "letsencrypt-certs:/letsencrypt"
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.data.certificates == true
      labels:
        - traefik.enable=true
        # network to use
        - traefik.docker.network=public-gateway
        # Use the custom label "traefik.constraint-label=public-gateway"
        # This public Traefik will only use services with this label
        # That way you can add other internal Traefik instances per stack if needed
        - traefik.constraint-label=public-gateway
        # globally redirect all http requests to https
        - traefik.http.routers.http-catchall.rule=hostregexp(`{any:.+}`)
        - traefik.http.routers.http-catchall.entrypoints=http
        - traefik.http.routers.http-catchall.middlewares=redirect-to-https
        - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
        # generate a middleware with basic auth to protect UI/Dashboard of traefik
        - traefik.http.middlewares.admin-auth.basicauth.users=${USERNAME}:${HASHED_PASSWORD}
        - traefik.http.middlewares.admin-auth.basicauth.removeheader=true
        # Define the port inside of the Docker service to use
        - traefik.http.services.dashboard.loadbalancer.server.port=8080
        # Uses the environment variable DOMAIN
        - traefik.http.routers.dashboard-https.rule=Host("sys.${DOMAIN}")
        - traefik.http.routers.dashboard-https.entrypoints=http
        # Use the "le" (Let's Encrypt) resolver created below
        - traefik.http.routers.dashboard-https.tls=true
        - traefik.http.routers.dashboard-https.tls.certresolver=le
        # Use the special Traefik service api@internal with the web UI/Dashboard
        - traefik.http.routers.dashboard-https.service=api@internal
        # Enable HTTP Basic auth, using the middleware created above for traefik UI/Dashboard
        - traefik.http.routers.dashboard-https.middlewares=admin-auth
    networks:
      - public-gateway
    configs:
      - source: traefic-tls
        target: /configs/traefik.yml

volumes:
  letsencrypt-certs:

networks:
  public-gateway:
    external: true

configs:
  traefic-tls:
    file: ./traefik.yml
